/*
题目描述: 假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。
当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的矩阵来表示的。
例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。请你计算出粉刷完所有房子最少的花费成本。

注意： 所有花费均为正整数。

示例： 输入: 
[
    红   蓝  绿
    [17, 2, 17], // 0 号
    [16, 16, 5], // 1 号
    [14, 3, 19], // 2 号
]
输出: 10
解释: 将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色。
最少花费: 2 + 5 + 3 = 10。
*/

// f[i][x] = min(f[i-1][非 x 的 1号], f[i-1][非 x 的 2 号]) + costs[i][x]
export function minCost(costs: number[][]) {
  const row = costs.length;
  const cloum = costs[0].length;

  // 初始化 dp 数组
  const dp = new Array(row).fill(new Array(cloum).fill(0));

  // 初始化状态值
  dp[0][0] = costs[0][0]; // 0 号 红
  dp[0][1] = costs[0][1]; // 0 号 蓝
  dp[0][2] = costs[0][2]; // 0 号 绿

  // 开始更新刷到每一个房子时的状态值
  for (let i = 1; i < row; i++) {
    // 更新刷到当前房子时，给当前房子选用第 0 种油漆对应的最小总价
    dp[i][0] = Math.min(dp[i - 1][1], dp[i - 1][2]) + costs[i][0];
    // 更新刷到当前房子时，给当前房子选用第 1 种油漆对应的最小总价
    dp[i][1] = Math.min(dp[i - 1][2], dp[i - 1][0]) + costs[i][1];
    // 更新刷到当前房子时，给当前房子选用第 2 种油漆对应的最小总价
    dp[i][2] = Math.min(dp[i - 1][1], dp[i - 1][0]) + costs[i][2];
  }

  // 返回刷到最后一个房子时，所有可能出现的总价中的最小值
  return Math.min(dp[row - 1][0], dp[row - 1][1], dp[row - 1][2]);
}

// 测试
const costs = [
  [17, 2, 17],
  [16, 16, 5],
  [14, 3, 19],
];
console.log(minCost(costs));
